// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/module/authorization/core/authorization.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "monolith/internal/module/customer/core"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorizationUsecase is a mock of AuthorizationUsecase interface.
type MockAuthorizationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationUsecaseMockRecorder
}

// MockAuthorizationUsecaseMockRecorder is the mock recorder for MockAuthorizationUsecase.
type MockAuthorizationUsecaseMockRecorder struct {
	mock *MockAuthorizationUsecase
}

// NewMockAuthorizationUsecase creates a new mock instance.
func NewMockAuthorizationUsecase(ctrl *gomock.Controller) *MockAuthorizationUsecase {
	mock := &MockAuthorizationUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthorizationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationUsecase) EXPECT() *MockAuthorizationUsecaseMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthorizationUsecase) SignIn(arg0 context.Context, arg1 core.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationUsecaseMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorizationUsecase)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockAuthorizationUsecase) SignUp(arg0 context.Context, arg1 core.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthorizationUsecaseMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthorizationUsecase)(nil).SignUp), arg0, arg1)
}
